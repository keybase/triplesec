// Generated by IcedCoffeeScript 108.0.8
(function() {
  var Hasher, SHA3STD, WordArray, sha3lib, transform,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WordArray = require('./wordarray').WordArray;

  Hasher = require('./algbase').Hasher;

  sha3lib = require('sha3');

  SHA3STD = (function(_super) {
    __extends(SHA3STD, _super);

    function SHA3STD() {
      return SHA3STD.__super__.constructor.apply(this, arguments);
    }

    SHA3STD.outputLength = 512;

    SHA3STD.prototype.outputLength = SHA3STD.outputLength;

    SHA3STD.blockSize = (1600 - 2 * SHA3STD.outputLength) / 32;

    SHA3STD.prototype.blockSize = SHA3STD.blockSize;

    SHA3STD.output_size = SHA3STD.outputLength / 8;

    SHA3STD.prototype.output_size = SHA3STD.output_size;

    SHA3STD.prototype.reset = function() {
      this._hash = new sha3lib.SHA3(512);
      return this;
    };

    SHA3STD.prototype.get_output_size = function() {
      return this.output_size;
    };

    SHA3STD.prototype.update = function(messageUpdate) {
      this._hash.update(messageUpdate.to_buffer());
      return this;
    };

    SHA3STD.prototype.finalize = function(messageUpdate) {
      if (messageUpdate) {
        this._hash.update(messageUpdate.to_buffer());
      }
      return WordArray.from_buffer(this._hash.digest());
    };

    SHA3STD.prototype.scrub = function() {
      this.reset();
      return this;
    };

    SHA3STD.prototype.copy_to = function(obj) {
      SHA3STD.__super__.copy_to.call(this, obj);
      return obj._hash = this._hash;
    };

    SHA3STD.prototype.clone = function() {
      var out;
      out = new SHA3STD();
      this.copy_to(out);
      return out;
    };

    return SHA3STD;

  })(Hasher);

  transform = function(x) {
    var out;
    out = (new SHA3STD).finalize(x);
    x.scrub();
    return out;
  };

  exports.SHA3STD = SHA3STD;

  exports.transform = transform;

}).call(this);
